{"version":3,"sources":["domain/storage.ts","types/Node.ts","domain/fileTree.ts","api/api.ts","state/actions.ts","state/reducer.ts","state/index.tsx","domain/Drawing.ts","domain/Selection.ts","types/Vector2.ts","types/Path.ts","domain/util.ts","domain/TreeRenderer.ts","components/tree/TreePath.tsx","components/tree/NodeLink.tsx","components/form/RandomOwnerButton.tsx","components/tree/HelpBanner.tsx","components/tree/TreeView.tsx","components/view/PanelBadge.tsx","components/view/CollapsiblePanel.tsx","components/form/FormPanel.tsx","components/form/OwnerDataForm.tsx","components/form/RepoForm.tsx","components/form/BranchForm.tsx","components/tree/NodePanel.tsx","components/tree/TreePanel.tsx","components/view/Sidebar.tsx","components/App.tsx","index.tsx"],"names":["readFromStorage","storage","key","getItem","saveToStorage","value","setItem","Node","path","dirPath","parent","type","size","isLeaf","elements","firstFlag","this","node","length","buildTree","files","tree","file","tokens","split","curr","i","token","nextNode","find","n","push","deflattenTree","calculateTreeSizes","reduce","acc","apiUrl","makeHeaders","owner","headers","Authorization","btoa","processResponse","response","fn","a","ok","json","JSON","text","error","parse","Error","message","fetchRepos","url","fetch","map","repo","name","fetchBranches","branch","commitSha","commit","sha","fetchFiles","filter","truncated","actions","reducer","state","action","collapsed","ownerData","loading","repoData","repos","branchData","branches","treeData","mainNode","hoveredNode","renderer","console","warn","initialState","localStorage","sessionStorage","GitreeContext","React","createContext","Provider","children","useReducer","dispatch","setOwnerFormCollapsed","setOwner","setToken","getRepos","setRepoFormCollapsed","setRepo","getBranches","b","setBranchFormCollapsed","setBranch","setRenderer","setHoveredNode","setMainNode","getUrl","Drawing","ctx","minTextSize","textMargin","maxTextScale","rotationClamp","textAlign","textBaseline","from","to","beginPath","moveTo","x","y","lineTo","stroke","measureText","start","end","fitText","shape","Path2D","fillStyle","rect","fill","strokeStyle","lineWidth","sub","strokeRect","color","fillRect","canvas","clearRect","width","height","font","maxScale","bounds","rotation","scale","diagonalWidth","Math","min","atan2","PI","pos","lerp","save","translate","rotate","fillText","restore","Selection","callback","drawing","getContext","clear","pathOver","isMainPath","elem","drawOutline","tryDisplayText","textLength","drawSelectionText","Vector2","sqrt","other","val","amount","add","mul","Path","TreeRenderer","frontCanvas","linkRef","hoverCallback","currentNodeCallback","selection","currentNode","allPaths","firstLevelPaths","subdivPaths","currentPath","maxLevels","setCurrentNode","e","shiftKey","ctrlKey","paths","getPathOverType","findPathOver","hide","show","preventDefault","draw","canvasSize","drawSegment","zero","startPoint","endPoint","depth","skipSingleDirs","drawNodeText","style","display","drawRectPath","left","top","firstEnd","secondStart","parts","buckets","Array","obj","sort","minBucket","c","cc","partition","ratio","calculatePartsRatio","divPointX","divPointY","drawLine","first","second","fillArea","assert","nativeEvent","offsetX","offsetY","isPointInPath","TreePath","useContext","pathSegments","unshift","createPath","className","onClick","NodeLink","_ref","href","target","rel","aria-label","ref","icon","faExternalLinkAlt","owners","margin","padding","RandomOwnerButton","nextOwner","floor","random","faDice","HelpBanner","role","TreeView","canvasRef","useRef","frontCanvasRef","useEffect","current","onMouseLeave","hideSelection","click","onMouseMove","mouseMove","PanelBadge","faCheck","faTimes","faHourglass","CollapsiblePanel","props","setCollapsed","title","FormPanel","isOk","OwnerDataForm","form","required","onChange","disabled","RepoForm","hidden","r","BranchForm","NodePanel","showLink","faFile","faFolder","filesize","TreePanel","Sidebar","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5b71c6ca.chunk.js","sourcesContent":["export function readFromStorage(storage: Storage, key: string): string | null {\n    return storage.getItem(key);\n}\n\nexport function saveToStorage(storage: Storage, key: string, value: string) {\n    storage.setItem(key, value);\n}","export type NodeType = 'dir' | 'file' | 'dirs';\n\nexport class Node {\n  path: string;\n  dirPath: string;\n  parent: Node | null;\n  size: number;\n  elements: Node[];\n  isLeaf: boolean;\n  type: NodeType;\n  firstFlag: boolean = false;\n\n  constructor(path: string, dirPath: string, parent: Node | null, type: NodeType, size: number = 0, isLeaf: boolean = false) {\n    this.path = path;\n    this.dirPath = dirPath;\n    this.parent = parent;\n    this.type = type;\n    this.size = size;\n    this.isLeaf = isLeaf;\n    this.elements = [];\n  }\n\n  // return either leaf, or node with more than 1 child\n  skipSingleDirs(): Node {\n      if (this.isLeaf) return this;\n\n      let node: Node = this;\n      while (node.elements.length === 1) {\n          node = node.elements[0];\n      }\n      return node;\n  }\n}\n","import { Node } from '../types/Node';\nimport { GitHubFile } from '../api/apiTypes';\n\nconst deflattenTree = (files: GitHubFile[]) => {\n  const tree = new Node('', '/', null, 'dirs');\n  for (const file of files) {\n    const tokens = file.path.split(\"/\");\n    let curr: Node = tree;\n    let path: string = '/';\n    // build path\n    for (let i = 0; i < tokens.length - 1; i++) {\n      const token = tokens[i];\n      let nextNode = curr.elements.find((n: Node) => n.path === token);\n      if (!nextNode) {\n        nextNode = new Node(token, path, curr, 'dir');\n        curr.elements.push(nextNode);\n      }\n      curr = nextNode;\n      path += token + '/';\n    }\n\n    curr.elements.push(new Node(tokens[tokens.length - 1], file.path, curr, 'file', file.size, true));\n  }\n  return tree;\n};\n\nconst calculateTreeSizes = (tree: Node) => {\n  const size: number = tree.elements\n    .reduce((acc: number, curr: Node) => {\n      return acc + (curr.isLeaf ? curr.size : calculateTreeSizes(curr));\n    }, 0);\n  tree.size = size;\n  return size;\n};\n\nexport const buildTree = (files: GitHubFile[]) => {\n  const tree = deflattenTree(files);\n  calculateTreeSizes(tree);\n  return tree;\n};\n\nexport const partition = (node: Node): Node[] | null => {\n  if (node.isLeaf) {\n    throw Error(`Tried to partition a leaf node ${node.path} ${node.size}`);\n  }\n\n  // \"as equal in __size__ as possible\"\n  const buckets: Node[] = Array(2)\n    .fill(0)\n    .map(() => new Node('PARTITION OF ' + node.path, '', node, 'dirs', 0, false));\n\n  const obj = node.elements;\n\n  obj.sort((a, b) => b.size - a.size);\n  for (const node of obj) {\n    const minBucket: Node = buckets.find(\n      (c) => c.size === Math.min(...buckets.map((cc) => cc.size))\n    )!;\n    minBucket.elements.push(node)\n    minBucket.size += node.size;\n    minBucket.path = '';\n  }\n  return buckets;\n};\n","import { Branch } from \"../types/Branch\";\nimport { GitHubRepository, GitHubBranch, GitHubTreeNode, PossiblyTruncatedFiles } from \"./apiTypes\";\n\nconst apiUrl = 'https://api.github.com';\n\nconst makeHeaders = (owner: string, token?: string) => {\n  if (!token) {\n    return {}\n  }\n  return {\n    headers: {\n      Authorization: \"Basic \" + btoa(`${owner}:${token}`),\n    },\n  }\n}\n\nconst processResponse = async <T>(response: Response, fn: (t: any) => T) => {\n  if (response.ok) {\n    return fn(await response.json());\n  } else {\n    const error = JSON.parse(await response.text());\n    throw Error(error.message);\n  }\n}\n\nexport const fetchRepos = async (owner: string, token?: string): Promise<string[]> => {\n  const url = `${apiUrl}/users/${owner}/repos`;\n  const response = await fetch(url, makeHeaders(owner, token));\n\n  return processResponse<string[]>(response, (json: any) => json.map((repo: GitHubRepository) => repo.name));\n};\n\nexport const fetchBranches = async (owner: string, token: string | undefined, repo: string): Promise<Branch[]> => {\n  const url = `${apiUrl}/repos/${owner}/${repo}/branches`\n  const response = await fetch(url, makeHeaders(owner, token));\n\n  return processResponse<Branch[]>(response, (json: any) => json.map((branch: GitHubBranch) => ({ name: branch.name, commitSha: branch.commit.sha })));\n};\n\nexport const fetchFiles = async (owner: string, token: string | undefined, repo: string, sha: string, ): Promise<PossiblyTruncatedFiles> => {\n  const url = `${apiUrl}/repos/${owner}/${repo}/git/trees/${sha}?recursive=true`;\n  const response = await fetch(url, makeHeaders(owner, token));\n\n  return processResponse<PossiblyTruncatedFiles>(response, (json: any) => {\n    const files = json.tree\n      .filter((node: GitHubTreeNode) => node.type === 'blob')\n      .map((node: GitHubTreeNode) => ({ path: node.path, size: node.size }));\n    return { files, truncated: json.truncated };\n  });\n};\n","export const actions = {\n  SET_OWNER_FORM_COLLAPSED: \"SET_OWNER_FORM_COLLAPSED\",\n  SET_OWNER: \"SET_OWNER\",\n  SET_TOKEN: \"SET_TOKEN\",\n  FETCH_REPOS: \"FETCH_REPOS\",\n  SET_REPOS: \"SET_REPOS\",\n\n  SET_REPO_FORM_COLLAPSED: \"SET_REPO_FORM_COLLAPSED\",\n  SET_REPO: \"SET_REPO\",\n  FETCH_BRANCHES: \"FETCH_BRANCHES\",\n  SET_BRANCHES: \"SET_BRANCHES\",\n\n  SET_BRANCH_FORM_COLLAPSED: \"SET_BRANCH_FORM_COLLAPSED\",\n  SET_BRANCH: \"SET_BRANCH\",\n  FETCH_FILES: \"FETCH_FILES\",\n  BUILD_TREE: \"BUILD_TREE\",\n\n  SET_RENDERER: \"SET_RENDERER\",\n  REDRAW: \"REDRAW\",\n  SET_HOVERED_NODE: \"SET_HOVERED_NODE\",\n  SET_MAIN_NODE: \"SET_MAIN_NODE\",\n};\n","import { actions } from \"./actions\";\n\nexport const reducer = (state: any, action: any) => {\n  switch (action.type) {\n    case actions.SET_OWNER_FORM_COLLAPSED:\n      {\n        const { collapsed } = action;\n        return {\n          ...state,\n          ownerData: {\n            ...state.ownerData,\n            collapsed,\n          }\n        }\n      }\n    case actions.SET_OWNER:\n      const { owner } = action;\n      return {\n        ...state,\n        ownerData: {\n          ...state.ownerData,\n          collapsed: false,\n          owner,\n        },\n      };\n    case actions.SET_TOKEN:\n      const { token } = action;\n      return {\n        ...state,\n        ownerData: {\n          ...state.ownerData,\n          token,\n        },\n      };\n    case actions.FETCH_REPOS:\n      return {\n        ...state,\n        ownerData: {\n          ...state.ownerData,\n          loading: true,\n        },\n        repoData: {\n          ...state.repoData,\n          repos: [],\n          repo: null,\n        },\n        branchData: {\n          ...state.branchData,\n          branches: [],\n          branch: null,\n        }\n      };\n    case actions.SET_REPOS: {\n      const { error, repos } = action;\n      return {\n        ...state,\n        ownerData: {\n          ...state.ownerData,\n          error,\n          loading: false,\n          collapsed: !error,\n        },\n        repoData: {\n          ...state.repoData,\n          repos,\n          collapsed: !!error,\n        },\n      };\n    }\n\n    case actions.SET_REPO_FORM_COLLAPSED:\n      {\n        const { collapsed } = action;\n        return {\n          ...state,\n          repoData: {\n            ...state.repoData,\n            collapsed,\n          }\n        }\n      }\n    case actions.SET_REPO:\n      const { repo } = action;\n      return {\n        ...state,\n        repoData: {\n          ...state.repoData,\n          repo,\n        },\n        treeData: {\n          ...state.treeData,\n          ...(repo !== state.repoData.repo ? { files: [] } : {}),\n        },\n      };\n    case actions.FETCH_BRANCHES:\n      return {\n        ...state,\n        repoData: {\n          ...state.repoData,\n          loading: true,\n          error: \"\",\n        },\n        branchData: {\n          ...state.branchData,\n          branches: [],\n          branch: null,\n        },\n      };\n    case actions.SET_BRANCHES: {\n      const { error, branches, branch } = action;\n      return {\n        ...state,\n        repoData: {\n          ...state.repoData,\n          error,\n          loading: false,\n          collapsed: !error,\n        },\n        branchData: {\n          ...state.branchData,\n          loading: false,\n          branches,\n          branch,\n          collapsed: !!error,\n        },\n      };\n    }\n\n    case actions.SET_BRANCH_FORM_COLLAPSED:\n      {\n      const { collapsed } = action;\n      return {\n        ...state,\n        branchData: {\n          ...state.branchData,\n          collapsed,\n        }\n      }\n    }\n    case actions.SET_BRANCH:\n      const { branch } = action;\n      return {\n        ...state,\n        branchData: {\n          ...state.branchData,\n          branch,\n        },\n      };\n    case actions.FETCH_FILES:\n      return {\n        ...state,\n        branchData: {\n          ...state.branchData,\n          loading: true,\n          error: \"\",\n        },\n        treeData: {\n          files: [],\n          tree: null,\n        },\n      };\n    case actions.BUILD_TREE:\n      const { tree, files, error, truncated } = action;\n      return {\n        ...state,\n        branchData: {\n          ...state.branchData,\n          loading: false,\n          error,\n          collapsed: !error && !truncated,\n        },\n        treeData: {\n          files,\n          tree,\n          truncated,\n          mainNode: tree,\n          hoveredNode: null,\n        },\n      };\n\n    case actions.SET_HOVERED_NODE:\n      const { hoveredNode } = action;\n      return {\n        ...state,\n        treeData: {\n          ...state.treeData,\n          hoveredNode,\n        },\n      };\n\n    case actions.SET_MAIN_NODE:\n      const { mainNode } = action;\n      return {\n        ...state,\n        treeData: {\n          ...state.treeData,\n          mainNode,\n        },\n      };\n    case actions.SET_RENDERER:\n      const { renderer } = action;\n      return {\n        ...state,\n        treeData: {\n          ...state.treeData,\n          renderer,\n        },\n      };\n\n    default:\n      console.warn(\"unhandled state: \", action);\n      return state;\n  }\n};\n","import React from \"react\";\n\nimport { Branch } from \"../types/Branch\";\nimport { Node } from \"../types/Node\";\n\nimport { readFromStorage, saveToStorage } from \"../domain/storage\";\nimport { buildTree } from \"../domain/fileTree\";\nimport { fetchRepos, fetchBranches, fetchFiles } from \"../api/api\";\nimport { TreeRenderer } from \"../domain/TreeRenderer\";\n\nimport { AppState } from \"./types\";\nimport { actions } from \"./actions\";\nimport { reducer } from \"./reducer\";\n\nconst OWNER_KEY = \"owner\";\nconst TOKEN_KEY = \"token\";\n\nconst initialState: AppState = {\n  ownerData: {\n    owner: readFromStorage(localStorage, OWNER_KEY) || \"\",\n    token: readFromStorage(sessionStorage, TOKEN_KEY) || \"\",\n    loading: false,\n    error: \"\",\n    collapsed: false,\n  },\n  repoData: {\n    repos: [],\n    repo: \"\",\n    error: \"\",\n    loading: false,\n    collapsed: true,\n  },\n  branchData: {\n    branches: [],\n    branch: null,\n    loading: false,\n    error: \"\",\n    collapsed: true,\n  },\n  treeData: {\n    files: [],\n    truncated: false,\n    tree: null,\n    hoveredNode: null,\n    renderer: null,\n  },\n};\n\nexport const GitreeContext = React.createContext<any>(null);\n\nexport const Provider = (a: any) => {\n  const children = a.children;\n  const [state, dispatch]: [AppState, any] = React.useReducer(\n    reducer,\n    initialState\n  );\n  const value = {\n    state,\n    setOwnerFormCollapsed: (collapsed: boolean) => {\n      dispatch({ type: actions.SET_OWNER_FORM_COLLAPSED, collapsed });\n    },\n    setOwner: (owner: string) => {\n      dispatch({ type: actions.SET_OWNER, owner });\n    },\n    setToken: (token: string) => {\n      dispatch({ type: actions.SET_TOKEN, token });\n    },\n    getRepos: async () => {\n      dispatch({ type: actions.FETCH_REPOS });\n      const { owner, token } = state.ownerData;\n      try {\n        const repos = await fetchRepos(owner, token);\n        if (!repos.length) {\n          dispatch({\n            type: actions.SET_REPOS,\n            error:\n              \"This user appears to have no repos. Why don't you try another one?\",\n            repos,\n          });\n        } else {\n          dispatch({ type: actions.SET_REPOS, error: \"\", repos });\n          saveToStorage(localStorage, OWNER_KEY, owner);\n          saveToStorage(sessionStorage, TOKEN_KEY, token);\n        }\n      } catch (e) {\n        dispatch({\n          type: actions.SET_REPOS,\n          error: `Can't fetch repos: ${e.message}.`,\n          repos: [],\n        });\n      }\n    },\n\n    setRepoFormCollapsed: (collapsed: boolean) => {\n      dispatch({ type: actions.SET_REPO_FORM_COLLAPSED, collapsed });\n    },\n    setRepo: (repo: string) => {\n      dispatch({ type: actions.SET_REPO, repo });\n    },\n    getBranches: async () => {\n      dispatch({ type: actions.FETCH_BRANCHES });\n      const { owner, token } = state.ownerData;\n      const { repo } = state.repoData;\n      try {\n        const branches = await fetchBranches(owner, token, repo);\n        if (!branches.length) {\n          dispatch({\n            type: actions.SET_BRANCHES,\n            error:\n              \"This repo appears to have no branches. Why don't you try another one?\",\n            branches,\n          });\n        } else {\n          dispatch({\n            type: actions.SET_BRANCHES,\n            error: \"\",\n            branches,\n            branch: branches.find((b: Branch) => (b.name = \"master\")),\n          });\n        }\n      } catch (e) {\n        dispatch({\n          type: actions.SET_BRANCHES,\n          error: `Can't fetch branches: ${e.message}.`,\n          branches: [],\n        });\n      }\n    },\n\n    setBranchFormCollapsed: (collapsed: boolean) => {\n      dispatch({ type: actions.SET_BRANCH_FORM_COLLAPSED, collapsed });\n    },\n    setBranch: (branch: string) => {\n      dispatch({ type: actions.SET_BRANCH, branch });\n    },\n    buildTree: async () => {\n      dispatch({ type: actions.FETCH_FILES });\n      const { owner, token } = state.ownerData;\n      const { repo } = state.repoData;\n      const { branch } = state.branchData;\n      try {\n        const { files, truncated } = await fetchFiles(\n          owner,\n          token,\n          repo,\n          branch!.commitSha\n        );\n        dispatch({\n          type: actions.BUILD_TREE,\n          error: \"\",\n          files,\n          tree: buildTree(files),\n          truncated,\n        });\n      } catch (e) {\n        dispatch({\n          type: actions.BUILD_TREE,\n          error: `Can't fetch files: ${e.message}.`,\n          files: [],\n          tree: null,\n        });\n      }\n    },\n\n    setRenderer: (renderer: TreeRenderer) => {\n      dispatch({ type: actions.SET_RENDERER, renderer });\n    },\n    setHoveredNode: (hoveredNode: Node) => {\n      dispatch({ type: actions.SET_HOVERED_NODE, hoveredNode });\n    },\n    setMainNode: (mainNode: Node) => {\n      dispatch({ type: actions.SET_MAIN_NODE, mainNode });\n    },\n    // it should be an action, but having all the state here, it's too enticing...\n    getUrl: (node: Node) => {\n      const owner = state.ownerData.owner;\n      const repo = state.repoData.repo;\n      const branch = state.branchData.branch;\n      if (!branch) return;\n      return `https://github.com/${owner}/${repo}/tree/${branch!.name}/${\n        node.dirPath\n      }`;\n    },\n  };\n\n  return (\n    <GitreeContext.Provider value={value}> {children} </GitreeContext.Provider>\n  );\n};\n","import { Vector2 } from \"../types/Vector2\";\n\nexport class Drawing {\n    private readonly minTextSize = 16;\n    private readonly textMargin = 1.2;\n    private readonly maxTextScale = 2;\n    private readonly rotationClamp = 1.3;\n\n    constructor(private ctx: CanvasRenderingContext2D) {\n        this.ctx.textAlign = \"center\";\n        this.ctx.textBaseline = \"middle\";\n    }\n\n    drawLine(from: Vector2, to: Vector2): void {\n        this.ctx.beginPath();\n        this.ctx.moveTo(from.x, from.y);\n        this.ctx.lineTo(to.x, to.y);\n        this.ctx.stroke();\n    }\n\n    measureText(text: string): TextMetrics {\n        return this.ctx.measureText(text);\n    }\n\n    drawSelectionText(start: Vector2, end: Vector2, text: string) {\n        this.fitText(start, end, text, '40px Arial', 'white', 1);\n    }\n\n    drawNodeText(start: Vector2, end: Vector2, text: string): void {\n        this.fitText(start, end, text, '10px Arial', 'black', this.maxTextScale);\n    }\n\n    drawRectPath(start: Vector2, end: Vector2): Path2D {\n        const shape = new Path2D();\n\n        this.ctx.beginPath();\n        this.ctx.fillStyle = 'transparent';\n        shape.rect(start.x, start.y, end.x - start.x, end.y - start.y);\n        this.ctx.fill(shape);\n\n        return shape;\n    }\n\n    drawOutline(start: Vector2, end: Vector2) {\n        this.ctx.strokeStyle = \"white\";\n        this.ctx.lineWidth = 5;\n        const size = end.sub(start);\n        this.ctx.strokeRect(start.x, start.y, size.x, size.y);\n    }\n\n    fillArea(start: Vector2, end: Vector2, color: string): void {\n        const size = end.sub(start);\n\n        this.ctx.fillStyle = color\n        this.ctx.fillRect(start.x, start.y, size.x, size.y)\n    }\n\n    clear() {\n        const canvas = this.ctx.canvas;\n        this.ctx.clearRect(0, 0, canvas.width, canvas.height);\n    }\n\n    private fitText(start: Vector2, end: Vector2, text: string, font: string, color: string, maxScale: number) {\n        this.ctx.font = font;\n        const bounds = end.sub(start);\n        if (bounds.x < this.minTextSize || bounds.y < this.minTextSize) {\n            return;\n        }\n\n        const width = this.measureText(text).width * this.textMargin;\n        let rotation = 0;\n        let scale = 1;\n        if (bounds.x < width) {\n            if (bounds.y < width) {\n                const diagonalWidth = bounds.length;\n                if (diagonalWidth < width) {\n                    return;\n                }\n                scale = Math.min(diagonalWidth / width, maxScale);\n            }\n            else {\n                scale = Math.min(bounds.y / width, maxScale);\n            }\n            rotation = Math.atan2(bounds.y, bounds.x);\n            if (rotation > this.rotationClamp) {\n                rotation = Math.PI / 2;\n            }\n        }\n        else {\n            scale = Math.min(bounds.x / width, maxScale);\n        }\n        const pos = start.lerp(end, 0.5);\n\n        this.ctx.save();\n\n        this.ctx.fillStyle = color;\n        this.ctx.translate(pos.x, pos.y);\n        this.ctx.rotate(rotation);\n        this.ctx.scale(scale, scale);\n        this.ctx.fillText(text, 0, 0);\n        this.ctx.restore();\n    }\n}","import { Node } from './../types/Node';\nimport { Path } from \"../types/Path\";\nimport { Vector2 } from \"../types/Vector2\";\nimport { Drawing } from './Drawing';\n\nexport type SelectionCallback = (node: Node | null) => void;\n\nexport class Selection {\n    private callback: SelectionCallback;\n\n    private drawing: Drawing;\n\n    constructor(canvas: HTMLCanvasElement, callback: SelectionCallback) {\n        this.callback = callback;\n        this.drawing = new Drawing(canvas.getContext('2d')!)\n    }\n\n    hide() {\n        this.drawing.clear();\n        this.callback(null);\n    }\n\n    show(pathOver: Path) {\n        const { start, end, isMainPath, elem } = pathOver;\n\n        this.drawing.clear();\n\n        this.drawing.drawOutline(start, end);\n\n        if (isMainPath) {\n            this.tryDisplayText(elem.path, start, end);\n        }\n        this.callback(elem);\n    }\n\n    private tryDisplayText(text: string, start: Vector2, end: Vector2) {\n        const textLength = this.drawing.measureText(text).width;\n        if (end.x - start.x >= textLength) {\n            this.drawing.drawSelectionText(start, end, text);\n        }\n    }\n}\n","export class Vector2 {\n    static get zero(): Vector2 {\n        return new Vector2(0, 0);\n    }\n\n    get length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    }\n\n    constructor(public x: number, public y: number) { }\n\n    add(other: Vector2): Vector2 {\n        return new Vector2(this.x + other.x, this.y + other.y);\n    }\n\n    sub(other: Vector2): Vector2 {\n        return new Vector2(this.x - other.x, this.y - other.y);\n    }\n\n    mul(val: number) {\n        return new Vector2(this.x * val, this.y * val);\n    }\n\n    lerp(other: Vector2, amount: number): Vector2 {\n        return this.add(other.sub(this).mul(amount));\n    }\n}","import { Node } from \"./Node\";\nimport { Vector2 } from \"./Vector2\";\n\nexport class Path {\n    shape: Path2D;\n    elem: Node;\n    start: Vector2;\n    end: Vector2;\n    isMainPath: boolean;\n\n    constructor(shape: Path2D, elem: Node, start: Vector2, end: Vector2, isMainPath: boolean) {\n        this.shape = shape;\n        this.elem = elem;\n        this.start = start;\n        this.end = end;\n        this.isMainPath = isMainPath;\n    }\n}\n","export function lerp(from: number, to: number, amount: number): number {\n  return from + (to - from) * amount;\n}\n","import { Selection, SelectionCallback } from './Selection';\nimport { Drawing } from './Drawing';\n\nimport { Vector2 } from '../types/Vector2';\nimport { Node } from \"../types/Node\";\nimport { Path } from '../types/Path';\n\nimport { partition } from './fileTree';\nimport { lerp } from './util';\n\nexport class TreeRenderer {\n    private canvas: HTMLCanvasElement;\n    private linkRef: HTMLAnchorElement;\n    private selection: Selection;\n    private drawing: Drawing;\n    private currentNode: Node | null;\n\n    private allPaths: Path[] = [];\n    private firstLevelPaths: Path[] = [];\n    private subdivPaths: Path[] = [];\n    private currentPath: Path | null = null;\n\n    private readonly maxLevels = 25;\n    private setCurrentNode: SelectionCallback;\n\n    constructor(canvas: HTMLCanvasElement,\n        frontCanvas: HTMLCanvasElement,\n        linkRef: HTMLAnchorElement,\n        hoverCallback: SelectionCallback,\n        currentNodeCallback: SelectionCallback) {\n        this.canvas = canvas;\n        this.linkRef = linkRef;\n        this.selection = new Selection(frontCanvas, hoverCallback);\n        this.drawing = new Drawing(this.canvas.getContext('2d')!);\n\n        this.currentNode = null;\n        this.setCurrentNode = currentNodeCallback;\n    }\n\n    private getPathOverType(e: any): Path[] {\n        if (e.shiftKey) {\n            if (e.ctrlKey) {\n                return this.subdivPaths;\n            } else {\n                return this.allPaths;\n            }\n        } else {\n            return this.firstLevelPaths;\n        }\n    }\n\n    mouseMove(e: any) {\n        const paths = this.getPathOverType(e);\n        const pathOver = this.findPathOver(e, paths);\n        if (this.currentPath !== pathOver) {\n            this.currentPath = pathOver;\n            if (pathOver === null) {\n                this.selection.hide();\n            } else {\n                this.selection.show(pathOver);\n            }\n        }\n    }\n\n    click(e: MouseEvent) {\n        e.preventDefault(); // stop selecting sorrounding texts\n        if (this.currentPath === null) return;\n        this.draw(this.currentPath.elem);\n    }\n\n    hideSelection() {\n        this.selection.hide();\n        this.currentPath = null;\n    }\n\n    draw(node: Node) {\n        if (this.currentNode === node) return;\n\n        this.currentNode = node;\n        this.setCurrentNode(node);\n\n        this.selection.hide();\n\n        this.allPaths = [];\n        this.firstLevelPaths = [];\n        this.subdivPaths = [];\n        this.drawing.clear();\n\n        node.firstFlag = false;\n        for (const e of node.elements) {\n            e.firstFlag = true;\n        }\n\n        const canvasSize = new Vector2(this.canvas.width, this.canvas.height);\n        this.drawSegment(node, Vector2.zero, canvasSize, 0);\n    }\n\n    private drawSegment(node: Node, startPoint: Vector2, endPoint: Vector2, depth: number) {\n        if (++depth > this.maxLevels) return;\n\n        node = node.skipSingleDirs();\n\n        if (node.isLeaf) {\n            this.drawing.drawNodeText(startPoint, endPoint, node.path);\n            if (depth !== 1) {\n                this.linkRef.style.display = `none`;\n                const shape = this.drawing.drawRectPath(startPoint, endPoint);\n                this.allPaths.push(new Path(shape, node, startPoint, endPoint, false));\n            } else {\n                const text = node.path;\n                const size = this.drawing.measureText(text);\n                const x = lerp(0, this.canvas.width, 0.5) + size.width;\n                const y = lerp(0, this.canvas.height, 0.5);\n                this.linkRef.style.display = `inline`;\n                this.linkRef.style.left = `${x + 8}px`;\n                this.linkRef.style.top = `${y - 14}px`;\n            }\n            return;\n        }\n\n        if (node.firstFlag) {\n            const shape = this.drawing.drawRectPath(startPoint, endPoint);\n            this.firstLevelPaths.push(new Path(shape, node, startPoint, endPoint, true));\n        }\n\n        const parts: Node[] = partition(node)!;\n\n        const ratio = this.calculatePartsRatio(parts);\n\n        let firstEnd: Vector2, secondStart: Vector2;\n        if (endPoint.x - startPoint.x > endPoint.y - startPoint.y) {\n            const divPointX = lerp(startPoint.x, endPoint.x, ratio);\n            firstEnd = new Vector2(divPointX, endPoint.y);\n            secondStart = new Vector2(divPointX, startPoint.y);\n        } else {\n            const divPointY = lerp(startPoint.y, endPoint.y, ratio);\n            firstEnd = new Vector2(endPoint.x, divPointY);\n            secondStart = new Vector2(startPoint.x, divPointY);\n        }\n        this.drawing.drawLine(firstEnd, secondStart);\n\n        // add main paths on first level\n        if (depth === 1) {\n            if (!parts[0].isLeaf) {\n                const first = this.drawing.drawRectPath(startPoint, firstEnd);\n                this.subdivPaths.push(new Path(first, parts[0], startPoint, firstEnd, true));\n            }\n            if (!parts[1].isLeaf) {\n                const second = this.drawing.drawRectPath(secondStart, endPoint);\n                this.subdivPaths.push(new Path(second, parts[1], secondStart, endPoint, true));\n            }\n        }\n\n        const color = `rgba(0, 0, 63, ${0.15 / depth})`;\n        this.drawing.fillArea(startPoint, firstEnd, color);\n        this.drawing.fillArea(secondStart, endPoint, color);\n\n        this.drawSegment(parts[0], startPoint, firstEnd, depth);\n        this.drawSegment(parts[1], secondStart, endPoint, depth);\n    };\n\n    private calculatePartsRatio(parts: Node[]) {\n        console.assert(parts.length === 2);\n        const ratio = parts[0].size / (parts[0].size + parts[1].size);\n        if (ratio > 0.9) return 0.9;\n        if (ratio < 0.1) return 0.1;\n        return ratio;\n    }\n\n    private findPathOver(e: any, paths: Path[]): Path | null {\n        const { offsetX: x, offsetY: y } = e.nativeEvent;\n        const ctx = this.canvas.getContext('2d')!;\n        const pp = (path: Path) => ctx.isPointInPath(path.shape, x, y);\n        return paths.find(pp) || null;\n    }\n}\n","import React from \"react\";\n\nimport { GitreeContext } from \"../../state\";\nimport { Node } from \"../../types/Node\";\nimport \"./TreePath.scss\";\n\nexport function TreePath() {\n  const {\n    state: {\n      treeData: { mainNode },\n    },\n    setMainNode,\n  } = React.useContext(GitreeContext);\n\n  const createPath = (node: Node): Node[] => {\n    const pathSegments: Node[] = [];\n    let currentNode: Node | null = node;\n    do {\n      pathSegments.unshift(currentNode);\n      currentNode = currentNode.parent;\n    } while (currentNode !== null);\n    return pathSegments;\n  };\n\n  if (!mainNode) {\n    return null;\n  }\n\n  const path = createPath(mainNode);\n\n  return (\n    <div className=\"tree-path\">\n      {path.map((node) => (\n        <button\n          className=\"link\"\n          key={`${node.dirPath}/${node.path}`}\n          onClick={() => setMainNode(node)}\n        >\n          {node.path || 'root'}\n        </button>\n      ))}\n      <p>Tip: Press SHIFT to select individual files.</p>\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport { GitreeContext } from \"../../state\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faExternalLinkAlt } from \"@fortawesome/free-solid-svg-icons\";\n\ninterface NodeLinkProps {\n  node: React.ReactNode;\n  _ref?: any\n}\n\nexport function NodeLink({ node, _ref }: NodeLinkProps) {\n  const { getUrl } = React.useContext(GitreeContext);\n\n  return (\n    <a\n      href={getUrl(node)}\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n      aria-label=\"Open on GitHub\"\n      ref={_ref}\n    >\n      <FontAwesomeIcon color=\"#0090FF\" icon={faExternalLinkAlt} />\n    </a>\n  );\n}\n","import React, { CSSProperties } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faDice } from \"@fortawesome/free-solid-svg-icons\";\nimport { GitreeContext } from \"../../state\";\n\nconst owners = [\n  \"kubernetes\",\n  \"apache\",\n  \"microsoft\",\n  \"rust-lang\",\n  \"dotnet\",\n  \"nodejs\",\n  \"tensorflow\",\n  \"wordpress\",\n  \"facebook\",\n  \"gatsbyjs\",\n  \"angular\",\n  \"kyma-project\",\n];\n\nconst style = {\n  margin: 0,\n  padding: 0,\n  width: \"unset\",\n} as CSSProperties;\n\nexport function RandomOwnerButton() {\n  const { state, setOwner } = React.useContext(GitreeContext);\n  const { owner } = state.ownerData;\n\n  const setRandomOwner = (e: any) => {\n    e.preventDefault();\n    let nextOwner;\n    do {\n      nextOwner = owners[Math.floor(Math.random() * owners.length)];\n    } while (owner === nextOwner);\n    setOwner(nextOwner);\n  };\n\n  return (\n    <button style={style} className=\"link\" onClick={setRandomOwner}>\n      <FontAwesomeIcon icon={faDice} />\n    </button>\n  );\n}\n","import React from \"react\";\n\nimport './HelpBanner.scss';\nimport { RandomOwnerButton } from \"../form/RandomOwnerButton\";\n\nexport function HelpBanner() {\n  return (\n    <div className=\"help-banner\">\n      <h1>Hi!</h1>\n      <p>\n        This is\n        <span role=\"img\" aria-label=\"\">\n          {\" \"}\n          🌳{\" \"}\n        </span>\n        Gitree.\n      </p>\n      <p>You can map a GitHub repository like in WinDirStat or SpaceSniffer.</p>\n      <p>\n        Please set a GitHub username or organisation name on the right panel, then follow the steps!\n      </p>\n      <p>\n        You can always press the <RandomOwnerButton /> to choose a popular random repo.\n      </p>\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport { GitreeContext } from \"../../state\";\nimport { TreeRenderer } from \"../../domain/TreeRenderer\";\nimport { TreePath } from \"./TreePath\";\nimport \"./TreeView.scss\";\nimport { NodeLink } from \"./NodeLink\";\nimport { HelpBanner } from \"./HelpBanner\";\n\ninterface TreeViewProps {\n  width: number;\n  height: number;\n}\n\nexport function TreeView({ width, height }: TreeViewProps) {\n  const { state, setHoveredNode, setMainNode, setRenderer } = React.useContext(\n    GitreeContext\n  );\n\n  const { loading } = state.branchData;\n  const { tree, mainNode, renderer } = state.treeData;\n\n  const canvasRef = React.useRef<HTMLCanvasElement>(null);\n  const frontCanvasRef = React.useRef<HTMLCanvasElement>(null);\n  const linkRef = React.useRef<HTMLAnchorElement>(null);\n\n  React.useEffect(() => {\n    if (tree && canvasRef.current) {\n      setRenderer(\n        new TreeRenderer(\n          canvasRef.current,\n          frontCanvasRef.current!,\n          linkRef.current!,\n          setHoveredNode,\n          setMainNode\n        )\n      );\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [canvasRef, tree]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  React.useEffect(() => renderer?.draw(mainNode), [mainNode, renderer]);\n  \n  return (\n    <>\n      <div className=\"tree-view-container\">\n        {!mainNode && !loading && <HelpBanner />}\n        {mainNode && <NodeLink node={mainNode} _ref={linkRef} />}\n        <canvas ref={frontCanvasRef} width={width} height={height}></canvas>\n        <canvas\n          ref={canvasRef}\n          width={width}\n          height={height}\n          onMouseLeave={() => renderer?.hideSelection()}\n          onClick={(e) => renderer?.click(e)}\n          onMouseMove={(e) => renderer?.mouseMove(e)}\n        ></canvas>\n      </div>\n      <TreePath />\n    </>\n  );\n}\n","import React from \"react\";\n\nimport {\n  faCheck,\n  faTimes,\n  faHourglass,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { IconProp } from \"@fortawesome/fontawesome-svg-core\";\n\nexport type PanelBadgeType = \"OK\" | \"Error\" | \"Loading\" | \"None\";\n\ninterface PanelBadgeProps {\n  type: PanelBadgeType;\n}\n\nexport function PanelBadge({ type }: PanelBadgeProps) {\n  if (type === \"None\") {\n    return null;\n  }\n\n  let color: string = \"\";\n  let icon: IconProp | null = null;\n  switch (type) {\n    case \"OK\":\n      color = \"green\";\n      icon = faCheck;\n      break;\n    case \"Error\":\n      color = \"red\";\n      icon = faTimes;\n      break;\n    case \"Loading\":\n      color = \"black\";\n      icon = faHourglass;\n      break;\n    default:\n      throw Error(`Unrecognized badge ${type}.`);\n  }\n\n  return <FontAwesomeIcon style={{ color }} icon={icon!} />;\n}\n","import React from \"react\";\n\nimport { PanelBadge, PanelBadgeType } from \"./PanelBadge\";\nimport \"./CollapsiblePanel.scss\";\n\ninterface CollapsiblePanelProps {\n  collapsed: boolean;\n  setCollapsed: (collapsed: boolean) => void;\n  title: string;\n  children: React.ReactNode;\n  type: PanelBadgeType;\n}\n\nexport function CollapsiblePanel(props: CollapsiblePanelProps) {\n  const { collapsed, setCollapsed, title, type, children } = props;\n\n  return (\n    <div className=\"collapsible-panel\">\n      <h4 className=\"title\" onClick={() => setCollapsed(!collapsed)}>\n        {title}\n        <PanelBadge type={type} />\n      </h4>\n      <div className={collapsed ? \"content collapsed\" : \"content expanded\"}>\n        {children}\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { CollapsiblePanel } from \"../view/CollapsiblePanel\";\nimport { PanelBadgeType } from '../view/PanelBadge';\n\nexport interface FormPanelProps {\n  title: string;\n  isOk: boolean;\n  collapsed: boolean;\n  setCollapsed: (collapsed: boolean) => void;\n  loading: boolean;\n  error: string;\n  children: React.ReactNode;\n}\n\nexport function FormPanel(props: FormPanelProps) {\n  const { title, isOk, collapsed, setCollapsed, loading, error, children } = props;\n  let type: PanelBadgeType;\n  if (error) {\n    type = \"Error\";\n  } else if (loading) {\n    type = \"Loading\";\n  } else if (isOk) {\n    type = \"OK\";\n  } else {\n    type = \"None\";\n  }\n\n  return (\n    <CollapsiblePanel\n      collapsed={collapsed}\n      setCollapsed={setCollapsed}\n      type={type}\n      title={title}\n    >\n      {children}\n      {error && <p className=\"error\">{error}</p>}\n    </CollapsiblePanel>\n  );\n}\n","import React from \"react\";\nimport { GitreeContext } from \"../../state\";\nimport { FormPanel } from \"./FormPanel\";\nimport { RandomOwnerButton } from \"./RandomOwnerButton\";\n\nexport function OwnerDataForm() {\n  const { state, setOwner, setOwnerFormCollapsed, setToken, getRepos } = React.useContext(\n    GitreeContext\n  );\n  const { owner, token, loading, collapsed, error } = state.ownerData;\n  const { repos } = state.repoData;\n\n  const form = (\n    <section>\n      <label>\n        User/organisation <RandomOwnerButton />\n        <input\n          required\n          type=\"text\"\n          value={owner}\n          onChange={(e) => setOwner(e.target.value)}\n        />\n      </label>\n      <label>\n        GitHub token (optional)\n        <input\n          type=\"password\"\n          value={token}\n          onChange={(e) => setToken(e.target.value)}\n        />\n      </label>\n      <button type=\"button\" disabled={!owner} onClick={getRepos}>\n        Get repos\n      </button>\n    </section>\n  );\n\n  return (\n    <FormPanel\n      collapsed={collapsed}\n      setCollapsed={setOwnerFormCollapsed}\n      loading={loading}\n      error={error}\n      isOk={repos && repos.length}\n      title=\"Owner data\"\n    >\n      {form}\n    </FormPanel>\n  );\n}\n","import React from \"react\";\nimport { GitreeContext } from \"../../state\";\nimport { FormPanel } from \"./FormPanel\";\n\nexport function RepoForm() {\n  const {\n    state,\n    setRepo,\n    setRepoFormCollapsed,\n    getBranches,\n  } = React.useContext(GitreeContext);\n  const { repos, repo, loading, collapsed, error } = state.repoData;\n  const { branches } = state.branchData;\n\n  const form = (\n    <section>\n      <label>\n        Choose repo:\n        <select\n          disabled={!repos}\n          value={repo || \".none\"}\n          onChange={(e) => setRepo(e.target.value)}\n        >\n          <option value=\".none\" disabled hidden>\n            Select repo\n          </option>\n          {repos &&\n            repos.map((r: string) => (\n              <option key={r} value={r}>\n                {r}\n              </option>\n            ))}\n        </select>\n      </label>\n      <button type=\"button\" disabled={!repo} onClick={getBranches}>\n        Get branches\n      </button>\n    </section>\n  );\n\n  return (\n    <FormPanel\n      collapsed={collapsed}\n      setCollapsed={setRepoFormCollapsed}\n      loading={loading}\n      error={error}\n      isOk={branches && branches.length}\n      title=\"Repository\"\n    >\n      {form}\n    </FormPanel>\n  );\n}\n","import React from \"react\";\nimport { Branch } from \"../../types/Branch\";\nimport { GitreeContext } from \"../../state\";\nimport { FormPanel } from \"./FormPanel\";\n\nexport function BranchForm() {\n  const { state, setBranch, setBranchFormCollapsed, buildTree } = React.useContext(GitreeContext);\n  const { branches, branch, loading, collapsed, error } = state.branchData;\n  const { files, truncated } = state.treeData;\n  const form = (\n    <>\n      <section>\n        <label>\n          Choose branch:\n          <select\n            disabled={!branches}\n            value={branch ? branch.name : \".none\"}\n            onChange={(e) =>\n              setBranch(\n                branches!.find((b: Branch) => b.name === e.target.value)!\n              )\n            }\n          >\n            <option value=\".none\" disabled hidden>\n              Select branch\n            </option>\n            {branches &&\n              branches.map((b: Branch) => (\n                <option key={b.commitSha} value={b.name}>\n                  {b.name}\n                </option>\n              ))}\n          </select>\n        </label>\n        <button type=\"button\" disabled={!branch} onClick={buildTree}>\n          Build tree\n        </button>\n      </section>\n      {truncated && (\n        <p>\n          It looks like GitHub API response is truncated. Provide your API token\n          to fetch all the data.\n        </p>\n      )}\n    </>\n  );\n\n  return (\n    <FormPanel\n      collapsed={collapsed}\n      setCollapsed={setBranchFormCollapsed}\n      loading={loading}\n      error={error}\n      isOk={files && files.length}\n      title=\"Branch\"\n    >\n      {form}\n    </FormPanel>\n  );\n}\n","import React from \"react\";\n\nimport filesize from \"filesize\";\nimport { Node } from \"../../types/Node\";\n\nimport { faFile, faFolder } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { NodeLink } from \"./NodeLink\";\nimport \"./NodePanel.scss\";\n\ninterface NodePanelProps {\n  node: Node;\n  showLink?: boolean;\n}\n\nexport function NodePanel({ node, showLink }: NodePanelProps) {\n  if (!node) return null;\n  const icon = node.type === \"file\" ? faFile : faFolder;\n  return (\n    <section className=\"node-panel\">\n      <h5>\n        <FontAwesomeIcon color=\"#0090FF\" icon={icon} />\n        Name: {node.path || \"root\"}\n        {showLink && <NodeLink node={node} />}\n      </h5>\n      <p>Size: {filesize(node.size)}</p>\n    </section>\n  );\n}\n","import React from \"react\";\n\nimport { GitreeContext } from \"../../state\";\nimport { NodePanel } from './NodePanel';\nimport './TreePanel.scss';\n\nexport function TreePanel() {\n  const { state, setMainNode } = React.useContext(GitreeContext);\n  const { tree, mainNode, hoveredNode } = state.treeData;\n\n  return (\n    <div className=\"tree-panel\">\n      <section className=\"controls\">\n        <button disabled={!tree} onClick={() => setMainNode(tree)}>\n          Reset\n        </button>\n        <button\n          disabled={!tree || !mainNode.parent}\n          onClick={() => setMainNode(mainNode.parent)}\n        >\n          Navigate up\n        </button>\n      </section>\n      <NodePanel node={mainNode} showLink={true} />\n      <NodePanel node={hoveredNode} />\n    </div>\n  );\n}\n","import React from \"react\";\n\n// import { faHamburger } from \"@fortawesome/free-solid-svg-icons\";\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport \"./Sidebar.scss\";\n\ninterface SidebarProps {\n  children: React.ReactNode;\n}\n\nexport function Sidebar({ children }: SidebarProps) {\n  // const [isSidebarCollapsed, setSidebarCollapsed] = React.useState(false);\n\n  // const className = isSidebarCollapsed\n  //   ? \"sidebar collapsed\"\n  //   : \"sidebar expanded\";\n\n  return (\n    // <aside className={className}>\n    <aside className=\"sidebar expanded\">\n      {/* <button\n        onClick={() => setSidebarCollapsed(!isSidebarCollapsed)}\n        aria-label=\"expand/collapse\"\n      >\n        <FontAwesomeIcon icon={faHamburger} />\n      </button> */}\n      {children}\n    </aside>\n  );\n}\n","import React from \"react\";\n\nimport { Provider } from \"../state\";\n\nimport { TreeView } from \"./tree/TreeView\";\nimport { OwnerDataForm } from \"./form/OwnerDataForm\";\nimport { RepoForm } from \"./form/RepoForm\";\nimport { BranchForm } from \"./form/BranchForm\";\nimport { TreePanel } from \"./tree/TreePanel\";\nimport { Sidebar } from \"./view/Sidebar\";\n\nexport default function App() {\n  return (\n    <Provider>\n      <TreeView width={960} height={640} />\n      <Sidebar>\n        <form>\n          <OwnerDataForm />\n          <RepoForm />\n          <BranchForm />\n        </form>\n        <TreePanel />\n      </Sidebar>\n    </Provider>\n  );\n}\n","import React from 'react';\n//@ts-ignore\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport '@vladocar/basic.css/css/basic.css';\nimport './style.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}